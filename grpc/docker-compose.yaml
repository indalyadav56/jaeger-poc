services:
  envoy:
    image: envoyproxy/envoy:v1.29-latest
    container_name: envoy
    ports:
      - "80:80"
      - "9901:9901"  # Admin interface
    volumes:
      - ./api-gateway/envoy.yaml:/etc/envoy/envoy.yaml
    depends_on:
      - auth-service
      - user-service
      - product-service
      
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger-grpc
    ports:
      - "16686:16686" # Jaeger UI
      - "4318:4318" # OTLP HTTP ingest (v1/traces)
    environment:
      - LOG_LEVEL=debug
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://elasticsearch:9200
      - ES_NUM_SHARDS=1
      - ES_NUM_REPLICAS=1
    depends_on:
      elasticsearch:
        condition: service_healthy

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5

  postgres:
    image: postgres:latest
    container_name: postgres_container
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d users"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=users
      - DB_PORT=5432
    volumes:
      - postgres_data:/var/lib/postgresql/data

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: indal
      MONGO_INITDB_ROOT_PASSWORD: indal
  
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    restart: unless-stopped
 
  loki:
    image: grafana/loki:2.8.2
    container_name: loki
    volumes:
      - loki_data:/loki
      - ./monitoring/loki/loki-config.yaml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    restart: unless-stopped

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    volumes:
      - ./monitoring/promtail/promtail-config.yml:/etc/promtail/config.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro  # Read Docker logs
      - /var/run/docker.sock:/var/run/docker.sock  # Discover containers
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    ports:
      - "9090:9090"
    restart: unless-stopped

  user-service:
    build:
      context: .
      dockerfile: user-service/Dockerfile
    container_name: user-service
    depends_on:
      postgres:
        condition: service_healthy
      jaeger:
        condition: service_started
      product-service:
        condition: service_started
    ports:
      - "8080:8080"
      - "50051:50051"
    environment:
      - DATABASE_POSTGRES_NAME=users
      - DATABASE_POSTGRES_HOST=postgres
      - DATABASE_POSTGRES_PORT=5432
      - DATABASE_POSTGRES_USERNAME=postgres
      - DATABASE_POSTGRES_PASSWORD=postgres
      - APP_TRACE_ENDPOINT=jaeger:4318
      - CLIENTS_PRODUCT_SERVICE_TARGET=product-service
      - CLIENTS_PRODUCT_SERVICE_PORT=50053

  product-service:
    build:
      context: .
      dockerfile: product-service/Dockerfile
    container_name: product-service
    depends_on:
      - mongodb
      - jaeger
    ports:
      - "50053:50053"
    environment:
      - DATABASE_MONGODB_URI=mongodb://indal:indal@mongodb:27017
      - DATABASE_MONGODB_DATABASE=products
      - APP_TRACE_ENDPOINT=jaeger:4318

  auth-service:
    build:
      context: .
      dockerfile: auth-service/Dockerfile
    container_name: auth-service
    depends_on:
      - jaeger
      - user-service
    ports:
      - "50052:50052"
      - "8081:8081"

  swagger-api-service:
    build:
      context: ./swagger-api-service
      dockerfile: Dockerfile
    container_name: swagger-api-service
    ports:
      - "8085:8085"
    depends_on:
      - auth-service
      - user-service
  
volumes:
  es_data:
  postgres_data:
  mongodb_data:
  grafana_data:
  prometheus_data:
  loki_data:
